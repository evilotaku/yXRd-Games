using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerModel 
{
   [RealtimeProperty(1, true, true)]
   private string _playername = "";
   [RealtimeProperty(2, true, true)]
   private int _score = 0;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerModel : IModel {
    // Properties
    public string playername {
        get { return _cache.LookForValueInCache(_playername, entry => entry.playernameSet, entry => entry.playername); }
        set { if (value == playername) return; _cache.UpdateLocalCache(entry => { entry.playernameSet = true; entry.playername = value; return entry; }); FirePlayernameDidChange(value); }
    }
    public int score {
        get { return _cache.LookForValueInCache(_score, entry => entry.scoreSet, entry => entry.score); }
        set { if (value == score) return; _cache.UpdateLocalCache(entry => { entry.scoreSet = true; entry.score = value; return entry; }); FireScoreDidChange(value); }
    }
    
    // Events
    public delegate void PlayernameDidChange(PlayerModel model, string value);
    public event         PlayernameDidChange playernameDidChange;
    public delegate void ScoreDidChange(PlayerModel model, int value);
    public event         ScoreDidChange scoreDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool   playernameSet;
        public string playername;
        public bool   scoreSet;
        public int    score;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public PlayerModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FirePlayernameDidChange(string value) {
        try {
            if (playernameDidChange != null)
                playernameDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireScoreDidChange(int value) {
        try {
            if (scoreDidChange != null)
                scoreDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Playername = 1,
        Score = 2,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _playername = playername;
            _score = score;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Playername, _playername);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Score, (uint)_score);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.playernameSet)
                    length += WriteStream.WriteStringLength((uint)PropertyID.Playername, entry.playername);
                if (entry.scoreSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Score, (uint)entry.score);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Playername, _playername);
            stream.WriteVarint32((uint)PropertyID.Score, (uint)_score);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.playernameSet || entry.scoreSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.playernameSet)
                    stream.WriteString((uint)PropertyID.Playername, entry.playername);
                if (entry.scoreSet)
                    stream.WriteVarint32((uint)PropertyID.Score, (uint)entry.score);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool playernameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.playernameSet);
        bool scoreExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.scoreSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Playername: {
                    string previousValue = _playername;
                    
                    _playername = stream.ReadString();
                    
                    if (!playernameExistsInChangeCache && _playername != previousValue)
                        FirePlayernameDidChange(_playername);
                    break;
                }
                case (uint)PropertyID.Score: {
                    int previousValue = _score;
                    
                    _score = (int)stream.ReadVarint32();
                    
                    if (!scoreExistsInChangeCache && _score != previousValue)
                        FireScoreDidChange(_score);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
